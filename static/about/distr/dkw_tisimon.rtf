{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f36\froman\fcharset238\fprq2 Times New Roman CE;}{\f37\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f39\froman\fcharset161\fprq2 Times New Roman Greek;}{\f40\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f41\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f42\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f43\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f44\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\f46\fswiss\fcharset238\fprq2 Arial CE;}{\f47\fswiss\fcharset204\fprq2 Arial Cyr;}{\f49\fswiss\fcharset161\fprq2 Arial Greek;}{\f50\fswiss\fcharset162\fprq2 Arial Tur;}{\f51\fswiss\fcharset177\fprq2 Arial (Hebrew);}
{\f52\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f53\fswiss\fcharset186\fprq2 Arial Baltic;}{\f54\fswiss\fcharset163\fprq2 Arial (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;
\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\*\cs10 \additive \ssemihidden Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}}{\*\rsidtbl \rsid292911\rsid8661644\rsid11931185}
{\*\generator Microsoft Word 10.0.2627;}{\info{\title TI-SIMON, By Daniel Wilhelm}{\author Daniel Wilhelm}{\operator Daniel Wilhelm}{\creatim\yr2006\mo2\dy9\hr18\min7}{\revtim\yr2006\mo2\dy9\hr18\min7}{\version2}{\edmins1}{\nofpages4}{\nofwords1036}
{\nofchars5907}{\nofcharsws6930}{\vern16437}}\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3
\jcompress\viewkind1\viewscale75\htmautsp\nolnhtadjtbl\rsidroot8661644 \fet0\sectd \linex0\headery1080\footery1080\sectdefaultcl\sectrsid8661644\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}\pard\plain \qc \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\f1\fs28\insrsid8661644 TI-SIMON, By Daniel Wilhelm
\par }\pard \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20\insrsid8661644 
\par }{\f1\insrsid8661644 
This is a repeated pattern program in which the computer shows a sequence and the player must repeat it. Following is a fairly comprehensive manual on how the program works (to help you in making your own TI-BASIC games) followed by the program code. 

\par }{\b\f1\insrsid8661644 
\par }\pard \qc \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\f1\insrsid8661644 VARIABLE LISTING
\par }\pard \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\f1\insrsid8661644 A}{\f1\insrsid8661644  - Used to tell if the current blit is the computer's move or the player's
\par }{\b\f1\insrsid8661644 I}{\f1\insrsid8661644   - A general For counter
\par }{\b\f1\insrsid8661644 J}{\f1\insrsid8661644  - A general For counter; used for drawing the blits inside I loops
\par }{\b\f1\insrsid8661644 L}{\f1\insrsid8661644  - The level (e.g. how many blits the player has to remember)
\par }{\b\f1\insrsid8661644 R}{\f1\insrsid8661644  - The random number (when comp moves) or the response (when user moves)
\par }{\b\f1\insrsid8661644 X}{\f1\insrsid8661644  - The starting X position for the current blit
\par }{\b\f1\insrsid8661644 Y}{\f1\insrsid8661644  - The starting Y position for the current blit
\par }{\b\f1\insrsid8661644 SSD }{\f1\insrsid8661644 (list) - Simon Says Data, for holding the sequence
\par 
\par }\pard \qc \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\f1\insrsid8661644 LABEL LISTING
\par }\pard \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\f1\insrsid8661644 BK}{\f1\insrsid8661644  - Used as an improvised subroutine; goes BacK from the DR label
\par }{\b\f1\insrsid8661644 DR}{\f1\insrsid8661644  - Computes the starting X and Y for DRawing the blits
\par }{\b\f1\insrsid8661644 EG}{\f1\insrsid8661644  - End Game, the user has inputted an incorrect sequence
\par }{\b\f1\insrsid8661644 EX}{\f1\insrsid8661644  - EXits the program
\par }{\b\f1\insrsid8661644 NX}{\f1\insrsid8661644  - Gets the NeXt keypress from the user
\par }{\b\f1\insrsid8661644 ST}{\f1\insrsid8661644  - The STart of the program
\par 
\par I decided to make this game in graphics mode (the Graph Screen) instead of text mode (the Home Screen), mostly because more professional graphics displays can be performed there. It is important to note that in the above and following texts, a blit is de
fined as the blanking of one of the four quadrants in the main game screen when the computer is showing its sequence. 
\par 
\par }{\b\f1\insrsid8661644 #1)}{\f1\insrsid8661644   The first paragraph of code sets up the viewing window so that each X value is one pixel on the display screen (basically gotten fr
om ZOOM->ZInteger). The Y values are taken from half of the ZInteger function, so every Y value is two pixels down on the graph. Then a simple introductory message is displayed and waits until a keypress is entered.
\par 
\par The label ST is the start of the progra
m, in case the player wants to replay the game. When in graphics mode, you must make sure that the functions and plots are off so that predefined Y=...  functions are not drawn when the graph is displayed (also, make sure to turn these back on afterward).
 My game uses the axis to separate the screen into 4 parts (which is why the Xscl and Yscl is set to 0 - no tick marks). 
\par 
\par }{\b\f1\insrsid8661644 #2)}{\f1\insrsid8661644 
  A is initialized to 0 so that the first time we pass through the blit function it recognizes that the computer is moving. Note that the While 1 statement will repeat indefinitely, as 1 is always equal to 1. Next a simple text dropper is implemented that
 
will make falling text in the Home Screen. This is simply done via the Output command, by making the Y parameter part of a For loop. One interesting thing to note is that the calculator has no time consuming function, so a For loop that does nothing but L
*1->L is used that effectively takes up a constant amount of time on the calculator (L+0->L would also work and would most likely perform faster). 
\par 
\par }{\b\f1\insrsid8661644 #3)}{\f1\insrsid8661644   The number blits occur proportionally to the level number, so a For loop loops from 1 to L (the level).
 Now we start the DR label. This section is set up to act as a subroutine - unfortunately by using Goto statements to facilitate for the calculator's lack of support for in-program subroutines (although it does allow for external ones). Remember that we a
r
e in graphics mode, so the screen is mapped out to a preset coordinate system (in this case: X=-47 to 47, Y=-15 to 15) so we must simply calculate the upper left hand corner for each blit in terms of X and Y so that we can use the same blit function for a
ll four corners (R=1, upper left; R=2, upper right; R=3, lower left; R=4, lower right). Then is our pseudo-subroutine Goto, which branches to BK if R was user defined.
\par 
\par }{\b\f1\insrsid8661644 #4)}{\f1\insrsid8661644   Now we are at the computer's blitting routine. Since our X and Y values are preset,
 we must draw a line from (X,Y) to (X+47,Y) and so on for decrementing values of Y (because we are starting in the upper left corner of the blit). Following the draw is an immediate blank out so that we preserve the screen and don't have to redraw it via 
ClrDraw (slow and choppy). Notice how the For loop and X+... value have been modified so that the line doesn't write over the axis. And finally, we store the blit number in List SSD so that we can later tell if the user's sequence is correct.
\par 
\par }{\b\f1\insrsid8661644 #5)}{\f1\insrsid8661644   It is ti
me for the user to input something, as the computer is done displaying its pattern, and we must collect L inputs. The input via getKey is checked with valid values (the 7, 8, 4, 5, and 2nd keys) then if one is not found it simply loops back to get another
 
keypress. If one is found and it is correct in the sequence, the finding X and Y value code is reused at DR, except that this time R represents the user's response and A is set, letting DR know to bring the value back by Goto. If the 2nd key is hit, it br
anches to the EX label which exits the program. If it is not the correct press in the sequence, it flows to EG.
\par 
\par }{\b\f1\insrsid8661644 #6)}{\f1\insrsid8661644   In this next section we draw the user's selection. X's were used to denote his keypress (if it is correct). Note that we could have used th
e same blit code the computer move uses, but the X's are much faster and produce a nice effect as well. 
\par 
\par }{\b\f1\insrsid8661644 #7/8)}{\f1\insrsid8661644   Now the screen does some fancy blanking (Vertical commands) at label EG and asks the user to replay. And at label EX the program cleans up afte
r itself, so it is much friendlier to the user if he/she exits via the 2nd key rather than a manual 'ON' keypress. Also, some exiting text is displayed.
\par 
\par }{\f1\fs16\insrsid8661644 Note: -> stands for 'STO' key.  LSSD stands for a miniature L  (in LIST->OPS->B) followed by 'SSD'.}{\f1\fs20\insrsid8661644 
\par PROGRAM: SIMON
\par : -47->Xmin\tab \tab \tab \tab ; 1
\par : 47->Xmax
\par : 0->Xscl
\par : -15.5->Ymin
\par : 15.5->Ymax
\par : 0->Yscl
\par :
\par : ClrHome
\par : Output(1,5,"TI-SIMON")
\par : Output(3,2,"RePeAT PATTeRN")
\par : Output(5,1,"KeYS:")
\par : Output(5,7,"7  8")
\par : Output(6,7,"4  5")
\par : Output(7,4,"2ND eXITS")
\par : Output(8,2,"(PReSS A KeY)")
\par :
\par : While getKey=0
\par : End
\par :
\par : Lbl ST
\par : ClrDraw
\par : FnOff
\par : PlotsOff
\par : AxesOn
\par : 
\par : 0->A\tab \tab \tab \tab \tab ; 2
\par : 0->L
\par : While 1
\par : L+1->L
\par : For(I,1,8)\tab \tab \tab \tab 
\par : ClrHome
\par : Output(I,5,"LeveL")
\par : Output(I,11,L)
\par : For(J,0,30)
\par : L*1->L
\par : End: End
\par :
\par : DispGraph
\par : For(I,1,L)\tab \tab \tab \tab ; 3
\par : randInt(1,4)->R
\par : 
\par : Lbl DR
\par : If R=1 or R=3
\par : Then: -47->X
\par : Else: 0->X: End
\par : If R<3
\par : Then: 15->Y
\par : Else: 0->Y: End
\par :
\par : If A=1: Goto BK
\par : 
\par : For(J,1,14)\tab \tab \tab \tab ; 4
\par : Line(X+1,Y-J,X+46,Y-J): End
\par : For(J,1,14)
\par : Line(X+1,Y-J,X+46,Y-J,0): End
\par :
\par : R->LSSD(I)
\par : End
\par : 
\par : For(I,1,L)\tab \tab \tab \tab ; 5
\par : 
\par : Lbl NX
\par : getKey->R
\par : If R=72: 1->R
\par : If R=73: 2->R
\par : If R=82: 3->R
\par : If R=83: 4->R
\par : If R=21: Goto EX
\par : 
\par : If R>4 or R=0
\par : Goto NX
\par : 
\par : If R!=LSSD(I)
\par : Goto EG
\par : 1->A
\par : Goto DR
\par : Lbl BK
\par : 0->A
\par : 
\par : Line(X+1,Y-1,X+46,Y-14)\tab \tab ; 6
\par : Line(X+1,Y-14,X+46,Y-1)
\par : For(J,1,20)
\par : L*1->L: End
\par : Line(X+1,Y-1,X+46,Y-14,0)
\par : Line(X+1,Y-14,X+46,Y-1,0)
\par : End: End
\par : 
\par : Lbl EG\tab \tab \tab \tab ; 7\tab \tab \tab \tab 
\par : For(I,-15,15)
\par : Horizontal I
\par : End
\par : For(I,-47,47)
\par : Vertical I
\par : End
\par : Menu("RePLAY?", "YeS",ST,"NO",EX)
\par : 
\par : Lbl EX\tab \tab \tab \tab \tab ; 8\tab \tab \tab \tab 
\par : ClrHome
\par : FnOn
\par : ClrDraw
\par : Output(4,5,"SIMON, BY")
\par : Output(5,2,"DANIEL WILHELM")
\par }\pard \ql \li0\ri0\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid8661644 {\f1\fs20\insrsid8661644 : Stop}{\insrsid292911 
\par }}